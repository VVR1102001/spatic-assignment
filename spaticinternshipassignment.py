# -*- coding: utf-8 -*-
"""spaticinternshipassignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GcrVMFMamaIB2GvQGLhK0cMfumMHhpxN

#Introduction


- Required Modules
  - Pandas
  - Levenshtein
  - Geopy
  
&nbsp;

- Steps
 - Importing modules
 - Reading Input Dataset
 - Adding New Column
 - Comparing levenshtein distance whether it is less than 5 or not
 - Measuring Distance for entries which are within 200 meters
 - Classifying them 0 or 1
 - Creating output csv file after result

&nbsp;

1. Import Modules
"""

from Levenshtein import distance as lev #using levenshtein module we can find maximum number of single-character edits required to change one word into the other.

import pandas as p  #using pandas to read csv files
import geopy #using geopy to measure distance between entries

"""2. Read Input Data csv file"""

data = p.read_csv("assignment_data.csv") #reading input csv file

data #printing input csv file

"""3. Creating seperate column called " is_similar " to classify entries to 0 or 1. By default we are going to use 0 for now later it will be updated to required value."""

is_similar = [] #creating empty list to create is_similar column to classify

for e in range(len(data)): #iterating total entries for is_similar column (11814 entries)
  is_similar.append(0) #adding values to list
data["is_similar"] =  is_similar #assigning column values to column

data

"""4. Creating New list for only dataset values for perfoming string operations or string comparision."""

dataf = [] #creating seperate list to append only values from dataframe

for i in data.values:
  dataf.append(i)

"""5. Now create new list again to seperate common named entries to use for comparision using levenshtein distance."""

similar = [] #creating empty list to add and store similar named entries.
for c in range(len(dataf)):
  if c<len(dataf)-1:
    if lev(dataf[c][0],dataf[c+1][0])<5: #Measuring levenshtein distance if less than 5.
      similar.extend([dataf[c][0],dataf[c][1],dataf[c][2],dataf[c][3]]) #adding them into similar list
 
      similar.extend([dataf[c+1][0],dataf[c+1][1],dataf[c+1][2],dataf[c+1][3]]) #adding them into similar list

similar #displaying list after measuring levenshtein distance

"""6. Finding or measuring distance between entries and classifying them to 0 or 1. If the distance between them is within 200 meters then it is updated as 1 if not it will remain same."""

from geopy.distance import geodesic #importing required module to find distance between entries

for a in range(0,len(data)):
  if a<len(data)-1:
    newport_ri = (data.values[a][1], data.values[a][2])
    cleveland_oh = (data.values[a+1][1],data.values[a+1][2])
    re = str(geodesic(newport_ri, cleveland_oh).meters) #calcuting distance in meters and converting into string
    fre = float(re) #coverting again into float to check.
    if fre<200: #checking whether the distance is within 200 meters or not.
      if data.values[a][0] in similar and data.values[a+1][0] in similar: #checking if it is within 200 meters and names are also similar.
        data.iloc[a,[3]] = 1 #updating value of similar named entry and which has distance within 200 meters.
        data.iloc[a+1,[3]]=1 #updating value of similar named entry and which has distance within 200 meters.
 
    
  else:
    break # if not breaking the loop because not needed

"""7. Finally, converting the result dataframe into csv which is our output csv file."""

output = data.to_csv('output_data.csv', index = False) #creating output csv file after results

"""8. To verify result printing first 50 entries from output csv file whether is_similar is updated or not."""

udf = p.read_csv("output_data.csv") #verifying output_data.csv whether updation success or not

udf.head(50) #printing first 50 entries from output_data.csv

"""&nbsp;

&nbsp;
"""